diff --git a/contracts/exchange/Exchange.sol b/contracts/exchange/Exchange.sol
index 7e23f7e..29d7573 100644
--- a/contracts/exchange/Exchange.sol
+++ b/contracts/exchange/Exchange.sol
@@ -73,7 +73,7 @@ contract Exchange
                         aquiredToken += swappedAmount;
                         currentNav += haveTokenCount;
                     }
-                }
+                } 
                 if(currentNav >= nav) return aquiredToken;
             }
             return 0;
diff --git a/contracts/strategies/LivaOneMinter.sol b/contracts/strategies/LivaOneMinter.sol
index b1f1778..ff276a7 100644
--- a/contracts/strategies/LivaOneMinter.sol
+++ b/contracts/strategies/LivaOneMinter.sol
@@ -6,12 +6,34 @@ import "../interfaces/IYieldsterVault.sol";
 contract LivaOneMinter is ERC1155
 {
     address public APContract;
-    address private strategy;
+    address public strategy;
+    address public owner;
 
     constructor(address _APContract, address _strategyAddress) public ERC1155("https://game.example/api/item/{id}.json") 
     {
         APContract = _APContract;
         strategy = _strategyAddress;
+        owner = msg.sender;
+    }
+
+    modifier onlyOwner {
+        require(msg.sender == owner,"Only permitted to owner");
+          _;
+    }
+
+    function setAPContract(address _APContract) 
+        public 
+        onlyOwner
+    {
+        APContract = _APContract;
+    }
+
+    function setStrategyAddress(address _strategyAddress) 
+        public 
+        onlyOwner
+    {
+        strategy = _strategyAddress;
+
     }
 
     function mintStrategy(
diff --git a/contracts/strategies/LivaOneZapper.sol b/contracts/strategies/LivaOneZapper.sol
index cb0eb5b..e973fce 100644
--- a/contracts/strategies/LivaOneZapper.sol
+++ b/contracts/strategies/LivaOneZapper.sol
@@ -39,14 +39,17 @@ contract LivaOneZapper
         _;
     }
 
-    modifier onlyOwner{
-        require(msg.sender==owner,"Only permitted to owner");
+    modifier onlyOwner {
+        require(msg.sender == owner,"Only permitted to owner");
           _;
     }
 
 
-    function addProtocol(address _protocolAddress) public onlyOwner{
-        require(_protocolAddress != address(0),"Zero address");
+    function addProtocol(address _protocolAddress) 
+        public 
+        onlyOwner
+    {
+        require(_protocolAddress != address(0), "Zero address");
         protocolList.push(_protocolAddress);
     }
 
@@ -76,8 +79,15 @@ contract LivaOneZapper
         public 
         onlyOwner
     {
-        require(_slipage < 10000, "Give the percentage");
-        slipage=_slipage;
+        require(_slipage < 10000, "! percentage");
+        slipage = _slipage;
+    }
+
+    function setAPContract(address _APContract) 
+        public 
+        onlyOwner
+    {
+        APContract = _APContract;
     }
 
     function getActiveProtocol(address _safeAddress)
@@ -118,15 +128,10 @@ contract LivaOneZapper
         bytes memory swapData;
         IZapper(curveZapper).ZapInCurveVault(_depositAsset, _amount,_depositAsset,_yVault,minReturnTokens,address(0),swapData,address(0));
 
-        if(totalSupply() == 0) {
-            _shares=_amount;
-        } else {
-            _shares = getMintValue(getDepositNAV(_depositAsset, _amount));
-        }
-            
-        if(_shares > 0) {
-            _mint(msg.sender, _shares);
-        }
+        if(totalSupply() == 0) _shares = _amount;
+        else _shares = getMintValue(getDepositNAV(_depositAsset, _amount));
+
+        if(_shares > 0) _mint(msg.sender, _shares);
     }
 
     //Function to find the Token to be minted for a deposit
@@ -173,7 +178,6 @@ contract LivaOneZapper
     }
 
 
-
     function withdraw(uint256 _shares,address _withrawalAsset) 
         onlyRegisteredSafe
         public
@@ -181,8 +185,7 @@ contract LivaOneZapper
     {
         require(balanceOf(msg.sender) >= _shares,"Not enough shares");
         uint256 strategyTokenValueInUSD = (_shares.mul(getStrategyNAV())).div(totalSupply());
-        uint256 vaultTokenPriceInUSD=IAPContract(APContract).getUSDPrice(safeActiveProtocol[msg.sender]);
-        // Number of tokens tob removed from liquidity
+        uint256 vaultTokenPriceInUSD = IAPContract(APContract).getUSDPrice(safeActiveProtocol[msg.sender]);
         uint256 vaultTokensToRemoved = strategyTokenValueInUSD.mul(1e18).div(vaultTokenPriceInUSD);
         uint256 minTokensCount = vaultTokensToRemoved - vaultTokensToRemoved.mul(slipage).div(10000);
         _burn(msg.sender, _shares);
@@ -190,11 +193,9 @@ contract LivaOneZapper
             IERC20(safeActiveProtocol[msg.sender]).transfer(msg.sender,vaultTokensToRemoved);
             return (safeActiveProtocol[msg.sender],vaultTokensToRemoved);   
         } else {
-            uint256 returnedTokens=IZapper(zapOutZontract).ZapOut(msg.sender,_withrawalAsset,safeActiveProtocol[msg.sender],2,vaultTokensToRemoved,minTokensCount);
-            return (_withrawalAsset,returnedTokens);   
+            uint256 returnedTokens = IZapper(zapOutZontract).ZapOut(msg.sender,_withrawalAsset,safeActiveProtocol[msg.sender],2,vaultTokensToRemoved,minTokensCount);
+            return (_withrawalAsset, returnedTokens);   
         }
-        // 1 percentage of slipage
-
     }
 
 
@@ -206,7 +207,7 @@ contract LivaOneZapper
         uint256 mintokens = tokensToBeChanged-tokensToBeChanged.mul(slipage).div(10000);
         IERC20(safeActiveProtocol[msg.sender]).approve(curveZapper, tokensToBeChanged);
         bytes memory swapData;
-        IZapper(curveZapper).ZapInCurveVault(safeActiveProtocol[msg.sender], tokensToBeChanged, safeActiveProtocol[msg.sender], _protocol, mintokens, address(0),swapData,address(0));
+        IZapper(curveZapper).ZapInCurveVault(safeActiveProtocol[msg.sender], tokensToBeChanged, safeActiveProtocol[msg.sender], _protocol, mintokens, address(0), swapData, address(0));
         safeActiveProtocol[msg.sender] = _protocol;
     }
 
@@ -217,7 +218,7 @@ contract LivaOneZapper
         returns(address,uint256)
     {
         uint256 SafeProtocolBalance = _getProtocolBalanceForSafe();
-        return withdraw(SafeProtocolBalance,_withdrawalToken);
+        return withdraw(SafeProtocolBalance, _withdrawalToken);
     }
 
     function want() external view returns (address)
